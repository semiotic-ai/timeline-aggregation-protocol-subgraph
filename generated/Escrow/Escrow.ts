// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AuthorizeSigner extends ethereum.Event {
  get params(): AuthorizeSigner__Params {
    return new AuthorizeSigner__Params(this);
  }
}

export class AuthorizeSigner__Params {
  _event: AuthorizeSigner;

  constructor(event: AuthorizeSigner) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CancelThaw extends ethereum.Event {
  get params(): CancelThaw__Params {
    return new CancelThaw__Params(this);
  }
}

export class CancelThaw__Params {
  _event: CancelThaw;

  constructor(event: CancelThaw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CancelThawSigner extends ethereum.Event {
  get params(): CancelThawSigner__Params {
    return new CancelThawSigner__Params(this);
  }
}

export class CancelThawSigner__Params {
  _event: CancelThawSigner;

  constructor(event: CancelThawSigner) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizedSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get thawEndTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allocationID(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get expectedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get actualAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RevokeAuthorizedSigner extends ethereum.Event {
  get params(): RevokeAuthorizedSigner__Params {
    return new RevokeAuthorizedSigner__Params(this);
  }
}

export class RevokeAuthorizedSigner__Params {
  _event: RevokeAuthorizedSigner;

  constructor(event: RevokeAuthorizedSigner) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizedSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Thaw extends ethereum.Event {
  get params(): Thaw__Params {
    return new Thaw__Params(this);
  }
}

export class Thaw__Params {
  _event: Thaw;

  constructor(event: Thaw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalAmountThawing(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get thawEndTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ThawSigner extends ethereum.Event {
  get params(): ThawSigner__Params {
    return new ThawSigner__Params(this);
  }
}

export class ThawSigner__Params {
  _event: ThawSigner;

  constructor(event: ThawSigner) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizedSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get thawEndTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Escrow__authorizedSignersResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSender(): Address {
    return this.value0;
  }

  getThawEndTimestamp(): BigInt {
    return this.value1;
  }
}

export class Escrow__escrowAccountsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getBalance(): BigInt {
    return this.value0;
  }

  getAmountThawing(): BigInt {
    return this.value1;
  }

  getThawEndTimestamp(): BigInt {
    return this.value2;
  }
}

export class Escrow__getEscrowAccountFromSignerAddressResultValue0Struct extends ethereum.Tuple {
  get balance(): BigInt {
    return this[0].toBigInt();
  }

  get amountThawing(): BigInt {
    return this[1].toBigInt();
  }

  get thawEndTimestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class Escrow extends ethereum.SmartContract {
  static bind(address: Address): Escrow {
    return new Escrow("Escrow", address);
  }

  allocationIDTracker(): Address {
    let result = super.call(
      "allocationIDTracker",
      "allocationIDTracker():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_allocationIDTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allocationIDTracker",
      "allocationIDTracker():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  authorizedSigners(signer: Address): Escrow__authorizedSignersResult {
    let result = super.call(
      "authorizedSigners",
      "authorizedSigners(address):(address,uint256)",
      [ethereum.Value.fromAddress(signer)],
    );

    return new Escrow__authorizedSignersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_authorizedSigners(
    signer: Address,
  ): ethereum.CallResult<Escrow__authorizedSignersResult> {
    let result = super.tryCall(
      "authorizedSigners",
      "authorizedSigners(address):(address,uint256)",
      [ethereum.Value.fromAddress(signer)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Escrow__authorizedSignersResult(
        value[0].toAddress(),
        value[1].toBigInt(),
      ),
    );
  }

  escrowAccounts(
    sender: Address,
    receiver: Address,
  ): Escrow__escrowAccountsResult {
    let result = super.call(
      "escrowAccounts",
      "escrowAccounts(address,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return new Escrow__escrowAccountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_escrowAccounts(
    sender: Address,
    receiver: Address,
  ): ethereum.CallResult<Escrow__escrowAccountsResult> {
    let result = super.tryCall(
      "escrowAccounts",
      "escrowAccounts(address,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Escrow__escrowAccountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  escrowToken(): Address {
    let result = super.call("escrowToken", "escrowToken():(address)", []);

    return result[0].toAddress();
  }

  try_escrowToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("escrowToken", "escrowToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEscrowAccountFromSignerAddress(
    signer: Address,
    receiver: Address,
  ): Escrow__getEscrowAccountFromSignerAddressResultValue0Struct {
    let result = super.call(
      "getEscrowAccountFromSignerAddress",
      "getEscrowAccountFromSignerAddress(address,address):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return changetype<Escrow__getEscrowAccountFromSignerAddressResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getEscrowAccountFromSignerAddress(
    signer: Address,
    receiver: Address,
  ): ethereum.CallResult<Escrow__getEscrowAccountFromSignerAddressResultValue0Struct> {
    let result = super.tryCall(
      "getEscrowAccountFromSignerAddress",
      "getEscrowAccountFromSignerAddress(address,address):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Escrow__getEscrowAccountFromSignerAddressResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getEscrowAmount(sender: Address, receiver: Address): BigInt {
    let result = super.call(
      "getEscrowAmount",
      "getEscrowAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return result[0].toBigInt();
  }

  try_getEscrowAmount(
    sender: Address,
    receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEscrowAmount",
      "getEscrowAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revokeSignerThawingPeriod(): BigInt {
    let result = super.call(
      "revokeSignerThawingPeriod",
      "revokeSignerThawingPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_revokeSignerThawingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "revokeSignerThawingPeriod",
      "revokeSignerThawingPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  staking(): Address {
    let result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    let result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tapVerifier(): Address {
    let result = super.call("tapVerifier", "tapVerifier():(address)", []);

    return result[0].toAddress();
  }

  try_tapVerifier(): ethereum.CallResult<Address> {
    let result = super.tryCall("tapVerifier", "tapVerifier():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawEscrowThawingPeriod(): BigInt {
    let result = super.call(
      "withdrawEscrowThawingPeriod",
      "withdrawEscrowThawingPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_withdrawEscrowThawingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawEscrowThawingPeriod",
      "withdrawEscrowThawingPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get escrowToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get staking_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tapVerifier_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get allocationIDTracker_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get withdrawEscrowThawingPeriod_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get revokeSignerThawingPeriod_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveAllCall extends ethereum.Call {
  get inputs(): ApproveAllCall__Inputs {
    return new ApproveAllCall__Inputs(this);
  }

  get outputs(): ApproveAllCall__Outputs {
    return new ApproveAllCall__Outputs(this);
  }
}

export class ApproveAllCall__Inputs {
  _call: ApproveAllCall;

  constructor(call: ApproveAllCall) {
    this._call = call;
  }
}

export class ApproveAllCall__Outputs {
  _call: ApproveAllCall;

  constructor(call: ApproveAllCall) {
    this._call = call;
  }
}

export class AuthorizeSignerCall extends ethereum.Call {
  get inputs(): AuthorizeSignerCall__Inputs {
    return new AuthorizeSignerCall__Inputs(this);
  }

  get outputs(): AuthorizeSignerCall__Outputs {
    return new AuthorizeSignerCall__Outputs(this);
  }
}

export class AuthorizeSignerCall__Inputs {
  _call: AuthorizeSignerCall;

  constructor(call: AuthorizeSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proofDeadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get proof(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AuthorizeSignerCall__Outputs {
  _call: AuthorizeSignerCall;

  constructor(call: AuthorizeSignerCall) {
    this._call = call;
  }
}

export class CancelThawSignerCall extends ethereum.Call {
  get inputs(): CancelThawSignerCall__Inputs {
    return new CancelThawSignerCall__Inputs(this);
  }

  get outputs(): CancelThawSignerCall__Outputs {
    return new CancelThawSignerCall__Outputs(this);
  }
}

export class CancelThawSignerCall__Inputs {
  _call: CancelThawSignerCall;

  constructor(call: CancelThawSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelThawSignerCall__Outputs {
  _call: CancelThawSignerCall;

  constructor(call: CancelThawSignerCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get signedRAV(): RedeemCallSignedRAVStruct {
    return changetype<RedeemCallSignedRAVStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get allocationIDProof(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemCallSignedRAVStruct extends ethereum.Tuple {
  get rav(): RedeemCallSignedRAVRavStruct {
    return changetype<RedeemCallSignedRAVRavStruct>(this[0].toTuple());
  }

  get signature(): Bytes {
    return this[1].toBytes();
  }
}

export class RedeemCallSignedRAVRavStruct extends ethereum.Tuple {
  get allocationId(): Address {
    return this[0].toAddress();
  }

  get timestampNs(): BigInt {
    return this[1].toBigInt();
  }

  get valueAggregate(): BigInt {
    return this[2].toBigInt();
  }
}

export class RevokeAuthorizedSignerCall extends ethereum.Call {
  get inputs(): RevokeAuthorizedSignerCall__Inputs {
    return new RevokeAuthorizedSignerCall__Inputs(this);
  }

  get outputs(): RevokeAuthorizedSignerCall__Outputs {
    return new RevokeAuthorizedSignerCall__Outputs(this);
  }
}

export class RevokeAuthorizedSignerCall__Inputs {
  _call: RevokeAuthorizedSignerCall;

  constructor(call: RevokeAuthorizedSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeAuthorizedSignerCall__Outputs {
  _call: RevokeAuthorizedSignerCall;

  constructor(call: RevokeAuthorizedSignerCall) {
    this._call = call;
  }
}

export class ThawCall extends ethereum.Call {
  get inputs(): ThawCall__Inputs {
    return new ThawCall__Inputs(this);
  }

  get outputs(): ThawCall__Outputs {
    return new ThawCall__Outputs(this);
  }
}

export class ThawCall__Inputs {
  _call: ThawCall;

  constructor(call: ThawCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ThawCall__Outputs {
  _call: ThawCall;

  constructor(call: ThawCall) {
    this._call = call;
  }
}

export class ThawSignerCall extends ethereum.Call {
  get inputs(): ThawSignerCall__Inputs {
    return new ThawSignerCall__Inputs(this);
  }

  get outputs(): ThawSignerCall__Outputs {
    return new ThawSignerCall__Outputs(this);
  }
}

export class ThawSignerCall__Inputs {
  _call: ThawSignerCall;

  constructor(call: ThawSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ThawSignerCall__Outputs {
  _call: ThawSignerCall;

  constructor(call: ThawSignerCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

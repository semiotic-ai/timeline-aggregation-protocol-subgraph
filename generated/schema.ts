// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class EscrowAccount extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EscrowAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EscrowAccount must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EscrowAccount", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EscrowAccount | null {
    return changetype<EscrowAccount | null>(
      store.get_in_block("EscrowAccount", id.toHexString()),
    );
  }

  static load(id: Bytes): EscrowAccount | null {
    return changetype<EscrowAccount | null>(
      store.get("EscrowAccount", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get totalAmountThawing(): BigInt {
    let value = this.get("totalAmountThawing");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountThawing(value: BigInt) {
    this.set("totalAmountThawing", Value.fromBigInt(value));
  }

  get thawEndTimestamp(): BigInt {
    let value = this.get("thawEndTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set thawEndTimestamp(value: BigInt) {
    this.set("thawEndTimestamp", Value.fromBigInt(value));
  }

  get transactions(): TransactionLoader {
    return new TransactionLoader(
      "EscrowAccount",
      this.get("id")!.toBytes().toHexString(),
      "transactions",
    );
  }
}

export class Sender extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sender entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Sender must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Sender", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Sender | null {
    return changetype<Sender | null>(
      store.get_in_block("Sender", id.toHexString()),
    );
  }

  static load(id: Bytes): Sender | null {
    return changetype<Sender | null>(store.get("Sender", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get escrowAccounts(): EscrowAccountLoader {
    return new EscrowAccountLoader(
      "Sender",
      this.get("id")!.toBytes().toHexString(),
      "escrowAccounts",
    );
  }

  get transactions(): TransactionLoader {
    return new TransactionLoader(
      "Sender",
      this.get("id")!.toBytes().toHexString(),
      "transactions",
    );
  }

  get signers(): SignerLoader {
    return new SignerLoader(
      "Sender",
      this.get("id")!.toBytes().toHexString(),
      "signers",
    );
  }
}

export class Receiver extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Receiver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Receiver must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Receiver", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Receiver | null {
    return changetype<Receiver | null>(
      store.get_in_block("Receiver", id.toHexString()),
    );
  }

  static load(id: Bytes): Receiver | null {
    return changetype<Receiver | null>(store.get("Receiver", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get escrowAccounts(): EscrowAccountLoader {
    return new EscrowAccountLoader(
      "Receiver",
      this.get("id")!.toBytes().toHexString(),
      "escrowAccounts",
    );
  }

  get transactions(): TransactionLoader {
    return new TransactionLoader(
      "Receiver",
      this.get("id")!.toBytes().toHexString(),
      "transactions",
    );
  }
}

export class Transaction extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transaction must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id.toHexString()),
    );
  }

  static load(id: Bytes): Transaction | null {
    return changetype<Transaction | null>(
      store.get("Transaction", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionGroupID(): Bytes {
    let value = this.get("transactionGroupID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionGroupID(value: Bytes) {
    this.set("transactionGroupID", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get allocationID(): Bytes | null {
    let value = this.get("allocationID");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set allocationID(value: Bytes | null) {
    if (!value) {
      this.unset("allocationID");
    } else {
      this.set("allocationID", Value.fromBytes(<Bytes>value));
    }
  }

  get expectedAmount(): BigInt | null {
    let value = this.get("expectedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expectedAmount(value: BigInt | null) {
    if (!value) {
      this.unset("expectedAmount");
    } else {
      this.set("expectedAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get escrowAccount(): Bytes {
    let value = this.get("escrowAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set escrowAccount(value: Bytes) {
    this.set("escrowAccount", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Signer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Signer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Signer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Signer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Signer | null {
    return changetype<Signer | null>(
      store.get_in_block("Signer", id.toHexString()),
    );
  }

  static load(id: Bytes): Signer | null {
    return changetype<Signer | null>(store.get("Signer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get isAuthorized(): boolean {
    let value = this.get("isAuthorized");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAuthorized(value: boolean) {
    this.set("isAuthorized", Value.fromBoolean(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get thawEndTimestamp(): BigInt {
    let value = this.get("thawEndTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set thawEndTimestamp(value: BigInt) {
    this.set("thawEndTimestamp", Value.fromBigInt(value));
  }
}

export class EscrowAccountV2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EscrowAccountV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EscrowAccountV2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EscrowAccountV2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EscrowAccountV2 | null {
    return changetype<EscrowAccountV2 | null>(
      store.get_in_block("EscrowAccountV2", id.toHexString()),
    );
  }

  static load(id: Bytes): EscrowAccountV2 | null {
    return changetype<EscrowAccountV2 | null>(
      store.get("EscrowAccountV2", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get collector(): Bytes {
    let value = this.get("collector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collector(value: Bytes) {
    this.set("collector", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get totalAmountThawing(): BigInt {
    let value = this.get("totalAmountThawing");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountThawing(value: BigInt) {
    this.set("totalAmountThawing", Value.fromBigInt(value));
  }

  get thawEndTimestamp(): BigInt {
    let value = this.get("thawEndTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set thawEndTimestamp(value: BigInt) {
    this.set("thawEndTimestamp", Value.fromBigInt(value));
  }
}

export class Collector extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collector entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Collector must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Collector", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Collector | null {
    return changetype<Collector | null>(
      store.get_in_block("Collector", id.toHexString()),
    );
  }

  static load(id: Bytes): Collector | null {
    return changetype<Collector | null>(
      store.get("Collector", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get escrowAccounts(): EscrowAccountV2Loader {
    return new EscrowAccountV2Loader(
      "Collector",
      this.get("id")!.toBytes().toHexString(),
      "escrowAccounts",
    );
  }
}

export class LatestRav extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LatestRav entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LatestRav must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LatestRav", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LatestRav | null {
    return changetype<LatestRav | null>(
      store.get_in_block("LatestRav", id.toHexString()),
    );
  }

  static load(id: Bytes): LatestRav | null {
    return changetype<LatestRav | null>(
      store.get("LatestRav", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get dataService(): Bytes {
    let value = this.get("dataService");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set dataService(value: Bytes) {
    this.set("dataService", Value.fromBytes(value));
  }

  get serviceProvider(): Bytes {
    let value = this.get("serviceProvider");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set serviceProvider(value: Bytes) {
    this.set("serviceProvider", Value.fromBytes(value));
  }

  get valueAggregate(): BigInt {
    let value = this.get("valueAggregate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set valueAggregate(value: BigInt) {
    this.set("valueAggregate", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get signature(): Bytes {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }
}

export class DataService extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DataService entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DataService must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DataService", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DataService | null {
    return changetype<DataService | null>(
      store.get_in_block("DataService", id.toHexString()),
    );
  }

  static load(id: Bytes): DataService | null {
    return changetype<DataService | null>(
      store.get("DataService", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get latestRav(): LatestRavLoader {
    return new LatestRavLoader(
      "DataService",
      this.get("id")!.toBytes().toHexString(),
      "latestRav",
    );
  }
}

export class Payer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Payer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Payer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Payer | null {
    return changetype<Payer | null>(
      store.get_in_block("Payer", id.toHexString()),
    );
  }

  static load(id: Bytes): Payer | null {
    return changetype<Payer | null>(store.get("Payer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get escrowAccounts(): EscrowAccountV2Loader {
    return new EscrowAccountV2Loader(
      "Payer",
      this.get("id")!.toBytes().toHexString(),
      "escrowAccounts",
    );
  }

  get signers(): SignerV2Loader {
    return new SignerV2Loader(
      "Payer",
      this.get("id")!.toBytes().toHexString(),
      "signers",
    );
  }
}

export class ReceiverV2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReceiverV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ReceiverV2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ReceiverV2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ReceiverV2 | null {
    return changetype<ReceiverV2 | null>(
      store.get_in_block("ReceiverV2", id.toHexString()),
    );
  }

  static load(id: Bytes): ReceiverV2 | null {
    return changetype<ReceiverV2 | null>(
      store.get("ReceiverV2", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get escrowAccounts(): EscrowAccountV2Loader {
    return new EscrowAccountV2Loader(
      "ReceiverV2",
      this.get("id")!.toBytes().toHexString(),
      "escrowAccounts",
    );
  }
}

export class SignerV2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignerV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SignerV2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SignerV2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SignerV2 | null {
    return changetype<SignerV2 | null>(
      store.get_in_block("SignerV2", id.toHexString()),
    );
  }

  static load(id: Bytes): SignerV2 | null {
    return changetype<SignerV2 | null>(store.get("SignerV2", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get isAuthorized(): boolean {
    let value = this.get("isAuthorized");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAuthorized(value: boolean) {
    this.set("isAuthorized", Value.fromBoolean(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get thawEndTimestamp(): BigInt {
    let value = this.get("thawEndTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set thawEndTimestamp(value: BigInt) {
    this.set("thawEndTimestamp", Value.fromBigInt(value));
  }
}

export class TransactionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Transaction[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Transaction[]>(value);
  }
}

export class EscrowAccountLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): EscrowAccount[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<EscrowAccount[]>(value);
  }
}

export class SignerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Signer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Signer[]>(value);
  }
}

export class EscrowAccountV2Loader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): EscrowAccountV2[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<EscrowAccountV2[]>(value);
  }
}

export class LatestRavLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LatestRav[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LatestRav[]>(value);
  }
}

export class SignerV2Loader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SignerV2[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SignerV2[]>(value);
  }
}

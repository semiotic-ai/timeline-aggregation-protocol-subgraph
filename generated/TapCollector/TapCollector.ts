// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class GraphDirectoryInitialized extends ethereum.Event {
  get params(): GraphDirectoryInitialized__Params {
    return new GraphDirectoryInitialized__Params(this);
  }
}

export class GraphDirectoryInitialized__Params {
  _event: GraphDirectoryInitialized;

  constructor(event: GraphDirectoryInitialized) {
    this._event = event;
  }

  get graphToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get graphStaking(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get graphPayments(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get graphEscrow(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get graphController(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get graphEpochManager(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get graphRewardsManager(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get graphTokenGateway(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get graphProxyAdmin(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get graphCuration(): Address {
    return this._event.parameters[9].value.toAddress();
  }
}

export class PaymentCollected extends ethereum.Event {
  get params(): PaymentCollected__Params {
    return new PaymentCollected__Params(this);
  }
}

export class PaymentCollected__Params {
  _event: PaymentCollected;

  constructor(event: PaymentCollected) {
    this._event = event;
  }

  get paymentType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get payer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokensReceiver(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dataService(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get tokensDataService(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RAVCollected extends ethereum.Event {
  get params(): RAVCollected__Params {
    return new RAVCollected__Params(this);
  }
}

export class RAVCollected__Params {
  _event: RAVCollected;

  constructor(event: RAVCollected) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dataService(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get serviceProvider(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get timestampNs(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get valueAggregate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get metadata(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get signature(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class SignerAuthorized extends ethereum.Event {
  get params(): SignerAuthorized__Params {
    return new SignerAuthorized__Params(this);
  }
}

export class SignerAuthorized__Params {
  _event: SignerAuthorized;

  constructor(event: SignerAuthorized) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizedSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SignerRevoked extends ethereum.Event {
  get params(): SignerRevoked__Params {
    return new SignerRevoked__Params(this);
  }
}

export class SignerRevoked__Params {
  _event: SignerRevoked;

  constructor(event: SignerRevoked) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizedSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SignerThawCanceled extends ethereum.Event {
  get params(): SignerThawCanceled__Params {
    return new SignerThawCanceled__Params(this);
  }
}

export class SignerThawCanceled__Params {
  _event: SignerThawCanceled;

  constructor(event: SignerThawCanceled) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizedSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get thawEndTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SignerThawing extends ethereum.Event {
  get params(): SignerThawing__Params {
    return new SignerThawing__Params(this);
  }
}

export class SignerThawing__Params {
  _event: SignerThawing;

  constructor(event: SignerThawing) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorizedSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get thawEndTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TapCollector__authorizedSignersResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPayer(): Address {
    return this.value0;
  }

  getThawEndTimestamp(): BigInt {
    return this.value1;
  }
}

export class TapCollector__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class TapCollector__encodeRAVInputRavStruct extends ethereum.Tuple {
  get dataService(): Address {
    return this[0].toAddress();
  }

  get serviceProvider(): Address {
    return this[1].toAddress();
  }

  get timestampNs(): BigInt {
    return this[2].toBigInt();
  }

  get valueAggregate(): BigInt {
    return this[3].toBigInt();
  }

  get metadata(): Bytes {
    return this[4].toBytes();
  }
}

export class TapCollector__recoverRAVSignerInputSignedRAVStruct extends ethereum.Tuple {
  get rav(): TapCollector__recoverRAVSignerInputSignedRAVRavStruct {
    return changetype<TapCollector__recoverRAVSignerInputSignedRAVRavStruct>(
      this[0].toTuple(),
    );
  }

  get signature(): Bytes {
    return this[1].toBytes();
  }
}

export class TapCollector__recoverRAVSignerInputSignedRAVRavStruct extends ethereum.Tuple {
  get dataService(): Address {
    return this[0].toAddress();
  }

  get serviceProvider(): Address {
    return this[1].toAddress();
  }

  get timestampNs(): BigInt {
    return this[2].toBigInt();
  }

  get valueAggregate(): BigInt {
    return this[3].toBigInt();
  }

  get metadata(): Bytes {
    return this[4].toBytes();
  }
}

export class TapCollector extends ethereum.SmartContract {
  static bind(address: Address): TapCollector {
    return new TapCollector("TapCollector", address);
  }

  REVOKE_SIGNER_THAWING_PERIOD(): BigInt {
    let result = super.call(
      "REVOKE_SIGNER_THAWING_PERIOD",
      "REVOKE_SIGNER_THAWING_PERIOD():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_REVOKE_SIGNER_THAWING_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REVOKE_SIGNER_THAWING_PERIOD",
      "REVOKE_SIGNER_THAWING_PERIOD():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authorizedSigners(signer: Address): TapCollector__authorizedSignersResult {
    let result = super.call(
      "authorizedSigners",
      "authorizedSigners(address):(address,uint256)",
      [ethereum.Value.fromAddress(signer)],
    );

    return new TapCollector__authorizedSignersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_authorizedSigners(
    signer: Address,
  ): ethereum.CallResult<TapCollector__authorizedSignersResult> {
    let result = super.tryCall(
      "authorizedSigners",
      "authorizedSigners(address):(address,uint256)",
      [ethereum.Value.fromAddress(signer)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TapCollector__authorizedSignersResult(
        value[0].toAddress(),
        value[1].toBigInt(),
      ),
    );
  }

  collect(paymentType: i32, data: Bytes): BigInt {
    let result = super.call("collect", "collect(uint8,bytes):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(paymentType)),
      ethereum.Value.fromBytes(data),
    ]);

    return result[0].toBigInt();
  }

  try_collect(paymentType: i32, data: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collect", "collect(uint8,bytes):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(paymentType)),
      ethereum.Value.fromBytes(data),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): TapCollector__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new TapCollector__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<TapCollector__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TapCollector__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  encodeRAV(rav: TapCollector__encodeRAVInputRavStruct): Bytes {
    let result = super.call(
      "encodeRAV",
      "encodeRAV((address,address,uint64,uint128,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(rav)],
    );

    return result[0].toBytes();
  }

  try_encodeRAV(
    rav: TapCollector__encodeRAVInputRavStruct,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encodeRAV",
      "encodeRAV((address,address,uint64,uint128,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(rav)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  recoverRAVSigner(
    signedRAV: TapCollector__recoverRAVSignerInputSignedRAVStruct,
  ): Address {
    let result = super.call(
      "recoverRAVSigner",
      "recoverRAVSigner(((address,address,uint64,uint128,bytes),bytes)):(address)",
      [ethereum.Value.fromTuple(signedRAV)],
    );

    return result[0].toAddress();
  }

  try_recoverRAVSigner(
    signedRAV: TapCollector__recoverRAVSignerInputSignedRAVStruct,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "recoverRAVSigner",
      "recoverRAVSigner(((address,address,uint64,uint128,bytes),bytes)):(address)",
      [ethereum.Value.fromTuple(signedRAV)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensCollected(
    dataService: Address,
    receiver: Address,
    payer: Address,
  ): BigInt {
    let result = super.call(
      "tokensCollected",
      "tokensCollected(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(dataService),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(payer),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokensCollected(
    dataService: Address,
    receiver: Address,
    payer: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensCollected",
      "tokensCollected(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(dataService),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(payer),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get eip712Name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get eip712Version(): string {
    return this._call.inputValues[1].value.toString();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get revokeSignerThawingPeriod(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeSignerCall extends ethereum.Call {
  get inputs(): AuthorizeSignerCall__Inputs {
    return new AuthorizeSignerCall__Inputs(this);
  }

  get outputs(): AuthorizeSignerCall__Outputs {
    return new AuthorizeSignerCall__Outputs(this);
  }
}

export class AuthorizeSignerCall__Inputs {
  _call: AuthorizeSignerCall;

  constructor(call: AuthorizeSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proofDeadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get proof(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AuthorizeSignerCall__Outputs {
  _call: AuthorizeSignerCall;

  constructor(call: AuthorizeSignerCall) {
    this._call = call;
  }
}

export class CancelThawSignerCall extends ethereum.Call {
  get inputs(): CancelThawSignerCall__Inputs {
    return new CancelThawSignerCall__Inputs(this);
  }

  get outputs(): CancelThawSignerCall__Outputs {
    return new CancelThawSignerCall__Outputs(this);
  }
}

export class CancelThawSignerCall__Inputs {
  _call: CancelThawSignerCall;

  constructor(call: CancelThawSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelThawSignerCall__Outputs {
  _call: CancelThawSignerCall;

  constructor(call: CancelThawSignerCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get paymentType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RevokeAuthorizedSignerCall extends ethereum.Call {
  get inputs(): RevokeAuthorizedSignerCall__Inputs {
    return new RevokeAuthorizedSignerCall__Inputs(this);
  }

  get outputs(): RevokeAuthorizedSignerCall__Outputs {
    return new RevokeAuthorizedSignerCall__Outputs(this);
  }
}

export class RevokeAuthorizedSignerCall__Inputs {
  _call: RevokeAuthorizedSignerCall;

  constructor(call: RevokeAuthorizedSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeAuthorizedSignerCall__Outputs {
  _call: RevokeAuthorizedSignerCall;

  constructor(call: RevokeAuthorizedSignerCall) {
    this._call = call;
  }
}

export class ThawSignerCall extends ethereum.Call {
  get inputs(): ThawSignerCall__Inputs {
    return new ThawSignerCall__Inputs(this);
  }

  get outputs(): ThawSignerCall__Outputs {
    return new ThawSignerCall__Outputs(this);
  }
}

export class ThawSignerCall__Inputs {
  _call: ThawSignerCall;

  constructor(call: ThawSignerCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ThawSignerCall__Outputs {
  _call: ThawSignerCall;

  constructor(call: ThawSignerCall) {
    this._call = call;
  }
}
